#include <iostream>
#include <vector>
#include <string>

// Class representing a single book
class Book {
private:
    std::string title;   // Title of the book
    std::string author;  // Author of the book
    std::string ISBN;    // ISBN of the book (without hyphens)

public:
    // Constructor
    /**
     * Constructor to initialize a Book object.
     * Precondition: The `title`, `author`, and `ISBN` parameters must be non-empty strings.
     * Postcondition: A Book object is created with the provided details.
     */
    Book(std::string title, std::string author, std::string ISBN) 
        : title(title), author(author), ISBN(ISBN) {}

    // Getters
    /**
     * Get the title of the book.
     * Precondition: None.
     * Postcondition: Returns the title as a string.
     */
    std::string getTitle() const { return title; }

    /**
     * Get the author of the book.
     * Precondition: None.
     * Postcondition: Returns the author's name as a string.
     */
    std::string getAuthor() const { return author; }

    /**
     * Get the ISBN of the book.
     * Precondition: None.
     * Postcondition: Returns the ISBN as a string (without hyphens).
     */
    std::string getISBN() const { return ISBN; }
};

// Class representing the hash table for book management
class HashTable {
private:
    // Number of buckets
    static const int BUCKET_COUNT = 8003;

    // Array of vectors for chaining
    std::vector<std::vector<Book>> table;

    // Hash function
    /**
     * Hash function to compute a bucket index based on the entire ISBN.
     * Precondition: The `ISBN` parameter must be a numeric string without hyphens.
     * Postcondition: Returns an integer index in the range [0, BUCKET_COUNT).
     */
    int hashFunction(const std::string& ISBN) const {
        unsigned long long hash = 0;
        for (char digit : ISBN) {
            hash = (hash * 31 + (digit - '0')) % BUCKET_COUNT;
        }
        return hash;
    }

public:
    // Constructor
    /**
     * Constructor to initialize the HashTable object.
     * Precondition: None.
     * Postcondition: A HashTable object is created with `BUCKET_COUNT` empty buckets.
     */
    HashTable() : table(BUCKET_COUNT) {}

    // Add a book to the hash table
    /**
     * Add a book to the hash table.
     * Precondition: The `book` parameter must be a valid Book object with a non-empty ISBN.
     * Postcondition: The book is stored in the appropriate bucket based on the hash value.
     */
    void addBook(const Book& book) {
        int index = hashFunction(book.getISBN());
        table[index].push_back(book);
        std::cout << "[TRACE] Book added to bucket " << index << ".\n";
    }

    // Retrieve a book by ISBN
    /**
     * Retrieve a book from the hash table by its ISBN.
     * Precondition: The `ISBN` parameter must be a numeric string without hyphens.
     * Postcondition: Outputs book details if found; otherwise, indicates that the book was not found.
     */
    void getBook(const std::string& ISBN) const {
        int index = hashFunction(ISBN);
        std::cout << "[TRACE] Looking in bucket " << index << "...\n";

        for (const auto& book : table[index]) {
            if (book.getISBN() == ISBN) {
                std::cout << "[TRACE] Book found: " << book.getTitle() 
                          << " by " << book.getAuthor() << ".\n";
                return;
            }
        }

        std::cout << "[TRACE] Book not found.\n";
    }
};

// Main function demonstrating the system
/**
 * Main function to demonstrate the library system.
 * Precondition: None.
 * Postcondition: Allows the user to add and retrieve books using their ISBN.
 */
int main() {
    std::cout << "[TRACE] Initializing the library system...\n";
    
    // Create a hash table
    HashTable library;

    // Add books
    std::cout << "[TRACE] Adding books to the system...\n";
    library.addBook(Book("The C++ Programming Language", "Bjarne Stroustrup", "9780134685991"));
    library.addBook(Book("Clean Code", "Robert C. Martin", "9780132350884"));

    // User interaction for book retrieval
    std::cout << "\n[TRACE] Enter the ISBN of the book to retrieve (omit hyphens): ";
    std::string userISBN;
    std::cin >> userISBN;

    // Retrieve book
    library.getBook(userISBN);

    return 0;
}
