#include <iostream>
#include <string>

using namespace std;

// Class representing a single book
class Book {
private:
    string title;   // Title of the book
    string author;  // Author of the book
    string ISBN;    // ISBN of the book (without hyphens)

public:
    // Constructor
    /**
     * Constructor to initialize a Book object.
     * Precondition: `title`, `author`, and `ISBN` must be valid non-empty strings.
     * Postcondition: A Book object is created with the specified title, author, and ISBN.
     */
    Book(string title, string author, string ISBN) 
        : title(title), author(author), ISBN(ISBN) {}

    // Getters
    string getTitle() const { return title; }
    string getAuthor() const { return author; }
    string getISBN() const { return ISBN; }
};

// Node for a linked list
struct Node {
    Book book;      // Book data
    Node* next;     // Pointer to the next node

    /**
     * Constructor for Node.
     * Precondition: `book` must be a valid Book object.
     * Postcondition: A Node is created with the given book and no next node.
     */
    Node(const Book& book) : book(book), next(nullptr) {}
};

// Class representing the hash table for book management
class HashTable {
private:
    // Number of buckets
    static const int BUCKET_COUNT = 8003;

    // Array of linked lists for chaining
    Node* table[BUCKET_COUNT];

    // Hash function
    /**
     * Hash function to compute a bucket index based on the entire ISBN.
     * Precondition: `ISBN` must be a numeric string without hyphens.
     * Postcondition: Returns an integer index in the range [0, BUCKET_COUNT).
     */
    int hashFunction(const string& ISBN) const {
        unsigned long long hash = 0;
        for (char digit : ISBN) {
            hash = (hash * 31 + (digit - '0')) % BUCKET_COUNT;
        }
        return hash;
    }

public:
    // Constructor
    /**
     * Constructor to initialize the HashTable object.
     * Precondition: None.
     * Postcondition: A HashTable object is created with `BUCKET_COUNT` empty buckets.
     */
    HashTable() {
        for (int i = 0; i < BUCKET_COUNT; ++i) {
            table[i] = nullptr; // Initialize all buckets as empty
        }
    }

    // Add a book to the hash table
    /**
     * Add a book to the hash table.
     * Precondition: `book` must be a valid Book object with a non-empty ISBN.
     * Postcondition: The book is stored in the appropriate bucket based on its hash value.
     */
    void addBook(const Book& book) {
        int index = hashFunction(book.getISBN());
        cout << "[TRACE] Calculated bucket index: " << index << ".\n";

        // Insert the book into the linked list at the calculated index
        Node* newNode = new Node(book);
        newNode->next = table[index];
        table[index] = newNode;

        cout << "[TRACE] Book added: \"" << book.getTitle() 
             << "\" by " << book.getAuthor() 
             << " (ISBN: " << book.getISBN() << ") into bucket " << index << ".\n";
    }

    // Retrieve a book by ISBN
    /**
     * Retrieve a book from the hash table by its ISBN.
     * Precondition: `ISBN` must be a numeric string without hyphens.
     * Postcondition: Outputs book details if found; otherwise, indicates that the book was not found.
     */
    void getBook(const string& ISBN) const {
        int index = hashFunction(ISBN);
        cout << "[TRACE] Searching in bucket " << index << "...\n";

        Node* current = table[index];
        while (current != nullptr) {
            if (current->book.getISBN() == ISBN) {
                cout << "[TRACE] Book found: \"" << current->book.getTitle() 
                     << "\" by " << current->book.getAuthor() << ".\n";
                return;
            }
            current = current->next;
        }

        cout << "[TRACE] Book not found for ISBN: " << ISBN << ".\n";
    }

    // Destructor
    /**
     * Destructor to clean up dynamically allocated memory.
     * Precondition: None.
     * Postcondition: All dynamically allocated nodes are deleted.
     */
    ~HashTable() {
        for (int i = 0; i < BUCKET_COUNT; ++i) {
            Node* current = table[i];
            while (current != nullptr) {
                Node* temp = current;
                current = current->next;
                delete temp;
            }
        }
        cout << "[TRACE] HashTable memory cleaned up.\n";
    }
};

// Main function demonstrating the system
/**
 * Main function to demonstrate the library system.
 * Precondition: None.
 * Postcondition: Allows the user to add and retrieve books using their ISBN.
 */
int main() {
    cout << "[TRACE] Initializing the library system...\n";

    // Create a hash table
    HashTable library;

    // Add books
    cout << "[TRACE] Adding books to the system...\n";
    library.addBook(Book("The C++ Programming Language", "Bjarne Stroustrup", "9780134685991"));
    library.addBook(Book("Clean Code", "Robert C. Martin", "9780132350884"));

    // User interaction for book retrieval
    cout << "\n[TRACE] Enter the ISBN of the book to retrieve (omit hyphens): ";
    string userISBN;
    cin >> userISBN;

    // Retrieve book
    library.getBook(userISBN);

    return 0;
}
